{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1xs6CRq_88vGqoFyq8Qbxcd3lCAaTxHeT","timestamp":1670704943556},{"file_id":"1-KcnFv2PumzgYim8VBbPzLDtaXFL5aA8","timestamp":1670687997059}],"collapsed_sections":["t5VrQa_OMu74","FqTU7SDgjWgV"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","metadata":{"id":"1FdqcMXk96rS"},"source":["### Connect to Drive"]},{"cell_type":"code","metadata":{"id":"PxUZy3U-fjcm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670705003731,"user_tz":-60,"elapsed":20642,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"aa6308f5-6106-4013-c202-c06aaca86e7a"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}]},{"cell_type":"code","metadata":{"id":"C_cUOiS9flQ8","executionInfo":{"status":"ok","timestamp":1670705012322,"user_tz":-60,"elapsed":207,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"9ea0ccfe-be09-43f9-d059-fad55ebb5ee5","colab":{"base_uri":"https://localhost:8080/"}},"source":["%cd /gdrive/My Drive/"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/gdrive/My Drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"zfehjCy896Fd"},"source":["### Import libraries"]},{"cell_type":"code","metadata":{"id":"Z_wVYNVVfr6q","executionInfo":{"status":"ok","timestamp":1670705934190,"user_tz":-60,"elapsed":6,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"b26eadad-33ec-471a-fe25-a9eecd79de0d","colab":{"base_uri":"https://localhost:8080/"}},"source":["import tensorflow as tf\n","import numpy as np\n","import os\n","import random\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","plt.rc('font', size=16) \n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.preprocessing import MinMaxScaler\n","import warnings\n","import logging\n","import sklearn\n","\n","tfk = tf.keras\n","tfkl = tf.keras.layers\n","print(tf.__version__)"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["2.9.2\n"]}]},{"cell_type":"markdown","metadata":{"id":"lQWEHP13tQsc"},"source":["### Set seed for reproducibility"]},{"cell_type":"code","metadata":{"id":"imBtfhUPLwB-","executionInfo":{"status":"ok","timestamp":1670705020078,"user_tz":-60,"elapsed":225,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}}},"source":["# Random seed for reproducibility\n","seed = 42\n","\n","random.seed(seed)\n","os.environ['PYTHONHASHSEED'] = str(seed)\n","np.random.seed(seed)\n","tf.random.set_seed(seed)\n","tf.compat.v1.set_random_seed(seed)"],"execution_count":4,"outputs":[]},{"cell_type":"code","source":["!unzip training_dataset_homework2.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G3LcwjG56ZNo","executionInfo":{"status":"ok","timestamp":1670705085844,"user_tz":-60,"elapsed":64097,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"729a80dc-be52-4fbc-b3c4-ef3af1696bd5"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  training_dataset_homework2.zip\n","replace y_train.npy? [y]es, [n]o, [A]ll, [N]one, [r]ename: n\n","replace x_train.npy? [y]es, [n]o, [A]ll, [N]one, [r]ename: n\n"]}]},{"cell_type":"code","source":["denox = np.load('/gdrive/My Drive/x_train.npy')\n","denoy = np.load('/gdrive/My Drive/y_train.npy')\n","denox.shape, denoy.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4GwkC0Db6iK7","executionInfo":{"status":"ok","timestamp":1670705088386,"user_tz":-60,"elapsed":695,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"b3e17635-7889-4851-9599-9b72a2acee7f"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2429, 36, 6), (2429,))"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["denox"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KjiuHClxzfV3","executionInfo":{"status":"ok","timestamp":1670705447920,"user_tz":-60,"elapsed":4,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"fbe31cda-2ff1-45cb-b756-ed915402ebed"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[ 1.7597e+01,  8.1713e+00, -1.7842e+00, -1.9706e+01,\n","         -9.7135e+00, -6.1887e+01],\n","        [ 2.2974e-01, -5.8956e+00,  1.6837e+01,  5.0390e+00,\n","          2.4332e+00,  5.8914e+01],\n","        [-2.9654e+01, -2.1296e+01,  2.9103e+01, -4.7503e-01,\n","          7.5391e+01,  1.0665e+01],\n","        ...,\n","        [ 1.1982e+02,  2.1849e+02,  1.6398e+03,  5.9787e+02,\n","          2.1922e+03,  1.8484e+01],\n","        [ 9.1591e+01,  1.0378e+02,  1.8238e+03,  1.2460e+03,\n","          1.1301e+04,  7.5107e+02],\n","        [ 4.3719e+01,  3.0689e+01,  9.5092e+02,  8.5927e+02,\n","          8.1331e+03,  9.8883e+02]],\n","\n","       [[ 2.4209e+00, -5.6039e-01,  2.3654e+01, -3.8171e+00,\n","          1.3721e+00,  8.2510e+00],\n","        [ 1.6847e+00,  2.3989e+01,  1.7803e+01, -1.9575e+01,\n","         -8.2534e+00, -2.3959e+01],\n","        [ 5.0692e-01,  5.0281e+01,  5.1196e+01,  1.6036e+01,\n","          7.2974e-01, -1.8185e+01],\n","        ...,\n","        [-1.5618e+01, -7.4233e+00,  3.7833e+00,  1.6565e+00,\n","         -1.0438e+01, -5.5229e+00],\n","        [-1.0702e+01, -6.3568e+00, -4.6464e+00,  6.7957e-01,\n","         -5.5260e+00,  1.9070e+01],\n","        [-4.6352e+00, -3.2769e+00, -5.9048e+00, -1.9564e-01,\n","          1.1487e+00,  2.3275e+01]],\n","\n","       [[ 3.9688e+01,  7.0129e+02,  3.0038e+03,  3.4806e+01,\n","          6.5036e+01,  7.7808e+01],\n","        [ 1.6399e+02,  1.2559e+03,  3.3818e+03,  2.3965e+03,\n","          5.1936e+01, -7.0134e+01],\n","        [ 2.7545e+02,  1.7005e+03,  3.0922e+03,  3.3084e+03,\n","          1.9858e+02,  3.6742e+02],\n","        ...,\n","        [ 3.1521e+01,  9.1987e+00, -4.7701e+00,  1.5335e+01,\n","          1.7212e+01,  1.2384e+01],\n","        [ 2.5363e+01,  5.1979e+00,  6.0153e+00, -6.8815e+00,\n","          1.0936e+01, -6.4854e+01],\n","        [ 1.2557e+01,  2.2734e+00,  4.4831e+00, -1.2885e+01,\n","          1.0488e+01, -6.6960e+01]],\n","\n","       ...,\n","\n","       [[ 5.0312e+02,  1.6427e+03,  1.6508e+03,  1.5424e+03,\n","          1.4157e+03,  1.3090e+03],\n","        [ 3.1731e+02,  2.0105e+03,  2.1930e+03,  2.1599e+03,\n","          2.0417e+03,  1.9044e+03],\n","        [ 2.4274e+02,  1.4771e+03,  1.8077e+03,  1.8751e+03,\n","          1.8384e+03,  1.7504e+03],\n","        ...,\n","        [ 4.4821e-01,  2.2123e-01,  5.3692e+00,  1.4156e+01,\n","          1.6963e+01,  1.9934e+01],\n","        [-7.4565e-01,  1.8507e+00,  5.6273e+00,  1.3796e+01,\n","          1.6155e+01,  2.7067e+01],\n","        [-7.2203e-01,  2.8672e+00,  6.6811e+00,  1.3440e+01,\n","          1.7874e+01,  2.7193e+01]],\n","\n","       [[ 1.7756e+01,  2.0621e+00, -3.2330e+00,  3.2775e-01,\n","         -1.5536e+01,  9.1006e+00],\n","        [ 2.6275e+01,  2.0191e+00, -2.5783e+00, -1.6558e+00,\n","         -3.8543e+00, -5.7283e+01],\n","        [ 3.1817e+01,  1.6151e+00, -1.3073e+00, -3.9150e+00,\n","          1.5539e+01, -4.3464e+01],\n","        ...,\n","        [ 8.9397e+00,  8.3143e+00,  2.8575e+01,  4.1574e+01,\n","          8.0197e+01,  6.3055e+01],\n","        [ 1.0139e+01,  5.4037e+00,  2.5684e+01,  3.6630e+01,\n","          5.1392e+01,  1.5032e+01],\n","        [ 5.9396e+00,  2.3820e+00,  1.3211e+01,  1.8603e+01,\n","          3.3123e+01,  4.4679e-01]],\n","\n","       [[ 1.0391e+00, -1.2397e-01,  6.9213e-01,  4.2632e-01,\n","          8.7345e-01,  6.6273e-01],\n","        [-3.9896e+00,  2.1111e+00,  1.2686e+00, -5.9710e-01,\n","          3.9892e-01, -9.4295e-01],\n","        [ 1.8169e-01,  1.3814e+00,  6.6310e-01,  1.2138e-01,\n","          1.4185e+00,  9.8861e+00],\n","        ...,\n","        [ 2.0638e-01,  1.0287e+00, -9.2512e-01, -7.1633e-01,\n","          1.7333e+00,  4.7638e+00],\n","        [ 4.1429e+00,  1.0939e+00, -1.8921e-01,  1.1410e+00,\n","          9.3441e-01,  4.1742e+00],\n","        [-1.5545e+00, -1.2121e+00,  1.0705e+00,  1.3272e+00,\n","          2.4010e+00,  8.4550e+00]]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["pd.DataFrame(denox[:,1][:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"-BCqkztpzEPJ","executionInfo":{"status":"ok","timestamp":1670705757200,"user_tz":-60,"elapsed":215,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"d4e9fa90-0f7d-4d96-b04c-68be3d83ec45"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              0          1           2          3           4           5\n","0       0.22974    -5.8956    16.83700     5.0390     2.43320    58.91400\n","1       1.68470    23.9890    17.80300   -19.5750    -8.25340   -23.95900\n","2     163.99000  1255.9000  3381.80000  2396.5000    51.93600   -70.13400\n","3      10.35700    -3.2349    -0.91957     1.7898     2.17290   -12.77400\n","4      -8.04050     6.0689     8.95510     3.4754    29.21700    20.71300\n","...         ...        ...         ...        ...         ...         ...\n","2424   -8.20460     3.4195     5.94730     1.9557    17.48800    54.05400\n","2425    4.27870    -0.5289    -5.50420    -3.5219    15.76200   -14.80500\n","2426  317.31000  2010.5000  2193.00000  2159.9000  2041.70000  1904.40000\n","2427   26.27500     2.0191    -2.57830    -1.6558    -3.85430   -57.28300\n","2428   -3.98960     2.1111     1.26860    -0.5971     0.39892    -0.94295\n","\n","[2429 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-b44c3bd8-fa7f-4fa9-ae5f-b8e6d9ff991e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.22974</td>\n","      <td>-5.8956</td>\n","      <td>16.83700</td>\n","      <td>5.0390</td>\n","      <td>2.43320</td>\n","      <td>58.91400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.68470</td>\n","      <td>23.9890</td>\n","      <td>17.80300</td>\n","      <td>-19.5750</td>\n","      <td>-8.25340</td>\n","      <td>-23.95900</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>163.99000</td>\n","      <td>1255.9000</td>\n","      <td>3381.80000</td>\n","      <td>2396.5000</td>\n","      <td>51.93600</td>\n","      <td>-70.13400</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10.35700</td>\n","      <td>-3.2349</td>\n","      <td>-0.91957</td>\n","      <td>1.7898</td>\n","      <td>2.17290</td>\n","      <td>-12.77400</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-8.04050</td>\n","      <td>6.0689</td>\n","      <td>8.95510</td>\n","      <td>3.4754</td>\n","      <td>29.21700</td>\n","      <td>20.71300</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2424</th>\n","      <td>-8.20460</td>\n","      <td>3.4195</td>\n","      <td>5.94730</td>\n","      <td>1.9557</td>\n","      <td>17.48800</td>\n","      <td>54.05400</td>\n","    </tr>\n","    <tr>\n","      <th>2425</th>\n","      <td>4.27870</td>\n","      <td>-0.5289</td>\n","      <td>-5.50420</td>\n","      <td>-3.5219</td>\n","      <td>15.76200</td>\n","      <td>-14.80500</td>\n","    </tr>\n","    <tr>\n","      <th>2426</th>\n","      <td>317.31000</td>\n","      <td>2010.5000</td>\n","      <td>2193.00000</td>\n","      <td>2159.9000</td>\n","      <td>2041.70000</td>\n","      <td>1904.40000</td>\n","    </tr>\n","    <tr>\n","      <th>2427</th>\n","      <td>26.27500</td>\n","      <td>2.0191</td>\n","      <td>-2.57830</td>\n","      <td>-1.6558</td>\n","      <td>-3.85430</td>\n","      <td>-57.28300</td>\n","    </tr>\n","    <tr>\n","      <th>2428</th>\n","      <td>-3.98960</td>\n","      <td>2.1111</td>\n","      <td>1.26860</td>\n","      <td>-0.5971</td>\n","      <td>0.39892</td>\n","      <td>-0.94295</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2429 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b44c3bd8-fa7f-4fa9-ae5f-b8e6d9ff991e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b44c3bd8-fa7f-4fa9-ae5f-b8e6d9ff991e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b44c3bd8-fa7f-4fa9-ae5f-b8e6d9ff991e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"XRK9IPIc-ZEz"},"source":["### Exploration Data Analysis (EDA)\n","#### Human Activity Recognition"]},{"cell_type":"markdown","metadata":{"id":"GMysAd_I-lED"},"source":["Load and clean the dataset"]},{"cell_type":"code","metadata":{"id":"s8HtgcBGAzaD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670706399607,"user_tz":-60,"elapsed":262,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"fcdf673a-912b-4519-ed61-7cee26fcb69e"},"source":["# Split over users\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(denox, denoy, test_size=0.1, random_state=42)\n","X_train.shape, X_test.shape, y_train.shape, y_test.shape\n"],"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2186, 36, 6), (243, 36, 6), (2186,), (243,))"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"tguCut77u6bL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670706403241,"user_tz":-60,"elapsed":219,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"6a96099e-af9f-43a4-ec82-374704b5b15c"},"source":["# Convert the sparse labels to categorical values\n","y_train = tfk.utils.to_categorical(y_train)\n","y_test = tfk.utils.to_categorical(y_test)\n","X_train.shape, y_train.shape, X_test.shape, y_test.shape"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2186, 36, 6), (2186, 12), (243, 36, 6), (243, 12))"]},"metadata":{},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"g_0wmrz3MGsd"},"source":["### Build and train models"]},{"cell_type":"code","metadata":{"id":"XkUqhy__KMnr","executionInfo":{"status":"ok","timestamp":1670706409516,"user_tz":-60,"elapsed":200,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}}},"source":["input_shape = X_train.shape[1:]\n","classes = y_train.shape[-1]\n","batch_size = 128\n","epochs = 200"],"execution_count":58,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bAP1pRLKN_v9"},"source":["#### Vanilla Long Short Term Memory (LSTM) Neural Network\n","\n","![](https://drive.google.com/uc?export=view&id=1FZ_P4SgVAA_mCZQ0tK18VwRqGqzNANOE\n",")"]},{"cell_type":"code","metadata":{"id":"vn115JrZjdTT","executionInfo":{"status":"ok","timestamp":1670706413483,"user_tz":-60,"elapsed":2,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}}},"source":["def build_LSTM_classifier(input_shape, classes):\n","    # Build the neural network layer by layer\n","    input_layer = tfkl.Input(shape=input_shape, name='Input')\n","\n","    # Feature extractor\n","    lstm = tfkl.LSTM(128, return_sequences=True)(input_layer)\n","    lstm = tfkl.LSTM(128)(lstm)\n","    dropout = tfkl.Dropout(.5, seed=seed)(lstm)\n","\n","    # Classifier\n","    classifier = tfkl.Dense(128, activation='relu')(dropout)\n","    output_layer = tfkl.Dense(classes, activation='softmax')(classifier)\n","\n","    # Connect input and output through the Model class\n","    model = tfk.Model(inputs=input_layer, outputs=output_layer, name='model')\n","\n","    # Compile the model\n","    model.compile(loss=tfk.losses.CategoricalCrossentropy(), optimizer=tfk.optimizers.Adam(), metrics='accuracy')\n","\n","    # Return the model\n","    return model"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"SE7LPD2WKMvP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670706416570,"user_tz":-60,"elapsed":563,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"67321ea8-70aa-4bf4-d1b9-127c8e62fd83"},"source":["model = build_LSTM_classifier(input_shape, classes)\n","model.summary()"],"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," Input (InputLayer)          [(None, 36, 6)]           0         \n","                                                                 \n"," lstm_2 (LSTM)               (None, 36, 128)           69120     \n","                                                                 \n"," lstm_3 (LSTM)               (None, 128)               131584    \n","                                                                 \n"," dropout_1 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 128)               16512     \n","                                                                 \n"," dense_3 (Dense)             (None, 12)                1548      \n","                                                                 \n","=================================================================\n","Total params: 218,764\n","Trainable params: 218,764\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"xujngeFRKMsu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670706433876,"user_tz":-60,"elapsed":15446,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"01d97af1-dbc7-4a7a-8e87-7bf17dc6b3ed"},"source":["# Train the model\n","history = model.fit(\n","    x = X_train,\n","    y = y_train,\n","    batch_size = batch_size,\n","    epochs = epochs,\n","    validation_split=.1,\n","    callbacks = [\n","        tfk.callbacks.EarlyStopping(monitor='val_accuracy', mode='max', patience=10, restore_best_weights=True),\n","        tfk.callbacks.ReduceLROnPlateau(monitor='val_accuracy', mode='max', patience=5, factor=0.5, min_lr=1e-5)\n","    ]\n",").history"],"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","16/16 [==============================] - 9s 73ms/step - loss: 2.1396 - accuracy: 0.3401 - val_loss: 1.7496 - val_accuracy: 0.4384 - lr: 0.0010\n","Epoch 2/200\n","16/16 [==============================] - 0s 17ms/step - loss: 1.7008 - accuracy: 0.4413 - val_loss: 1.4476 - val_accuracy: 0.5205 - lr: 0.0010\n","Epoch 3/200\n","16/16 [==============================] - 0s 14ms/step - loss: 1.4359 - accuracy: 0.4977 - val_loss: 1.2444 - val_accuracy: 0.5662 - lr: 0.0010\n","Epoch 4/200\n","16/16 [==============================] - 0s 13ms/step - loss: 1.2876 - accuracy: 0.5547 - val_loss: 1.1498 - val_accuracy: 0.5982 - lr: 0.0010\n","Epoch 5/200\n","16/16 [==============================] - 0s 15ms/step - loss: 1.1682 - accuracy: 0.6019 - val_loss: 1.0817 - val_accuracy: 0.6210 - lr: 0.0010\n","Epoch 6/200\n","16/16 [==============================] - 1s 34ms/step - loss: 1.0761 - accuracy: 0.6248 - val_loss: 1.0236 - val_accuracy: 0.6484 - lr: 0.0010\n","Epoch 7/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.9993 - accuracy: 0.6568 - val_loss: 0.9811 - val_accuracy: 0.6712 - lr: 0.0010\n","Epoch 8/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.9137 - accuracy: 0.6955 - val_loss: 0.9676 - val_accuracy: 0.6895 - lr: 0.0010\n","Epoch 9/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.8642 - accuracy: 0.6950 - val_loss: 1.0504 - val_accuracy: 0.6164 - lr: 0.0010\n","Epoch 10/200\n","16/16 [==============================] - 0s 15ms/step - loss: 0.8102 - accuracy: 0.7306 - val_loss: 1.1173 - val_accuracy: 0.6575 - lr: 0.0010\n","Epoch 11/200\n","16/16 [==============================] - 0s 15ms/step - loss: 0.7444 - accuracy: 0.7463 - val_loss: 0.9945 - val_accuracy: 0.6804 - lr: 0.0010\n","Epoch 12/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.7113 - accuracy: 0.7651 - val_loss: 1.0160 - val_accuracy: 0.6530 - lr: 0.0010\n","Epoch 13/200\n","16/16 [==============================] - 0s 15ms/step - loss: 0.6444 - accuracy: 0.7804 - val_loss: 1.0700 - val_accuracy: 0.6712 - lr: 0.0010\n","Epoch 14/200\n","16/16 [==============================] - 0s 15ms/step - loss: 0.5577 - accuracy: 0.8063 - val_loss: 1.0630 - val_accuracy: 0.6941 - lr: 5.0000e-04\n","Epoch 15/200\n","16/16 [==============================] - 0s 15ms/step - loss: 0.5131 - accuracy: 0.8271 - val_loss: 1.1688 - val_accuracy: 0.6758 - lr: 5.0000e-04\n","Epoch 16/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.4685 - accuracy: 0.8454 - val_loss: 1.1368 - val_accuracy: 0.6804 - lr: 5.0000e-04\n","Epoch 17/200\n","16/16 [==============================] - 0s 17ms/step - loss: 0.4337 - accuracy: 0.8627 - val_loss: 1.1723 - val_accuracy: 0.6667 - lr: 5.0000e-04\n","Epoch 18/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.3985 - accuracy: 0.8744 - val_loss: 1.2363 - val_accuracy: 0.6758 - lr: 5.0000e-04\n","Epoch 19/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.3833 - accuracy: 0.8760 - val_loss: 1.1556 - val_accuracy: 0.6895 - lr: 5.0000e-04\n","Epoch 20/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.3344 - accuracy: 0.8882 - val_loss: 1.2636 - val_accuracy: 0.6758 - lr: 2.5000e-04\n","Epoch 21/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.3035 - accuracy: 0.9019 - val_loss: 1.2354 - val_accuracy: 0.6849 - lr: 2.5000e-04\n","Epoch 22/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.2773 - accuracy: 0.9080 - val_loss: 1.3131 - val_accuracy: 0.6712 - lr: 2.5000e-04\n","Epoch 23/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.2594 - accuracy: 0.9161 - val_loss: 1.3411 - val_accuracy: 0.6575 - lr: 2.5000e-04\n","Epoch 24/200\n","16/16 [==============================] - 0s 14ms/step - loss: 0.2430 - accuracy: 0.9258 - val_loss: 1.4024 - val_accuracy: 0.6575 - lr: 2.5000e-04\n"]}]},{"cell_type":"code","metadata":{"id":"1UCCpzTHKMqF","colab":{"base_uri":"https://localhost:8080/","height":818},"executionInfo":{"status":"ok","timestamp":1670706504297,"user_tz":-60,"elapsed":36030,"user":{"displayName":"Deniz Temurtas","userId":"03703581304082319480"}},"outputId":"ba4d8477-f83b-4030-df04-882cc0682640"},"source":["best_epoch = np.argmax(history['val_accuracy'])\n","plt.figure(figsize=(17,4))\n","plt.plot(history['loss'], label='Training loss', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_loss'], label='Validation loss', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Categorical Crossentropy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(17,4))\n","plt.plot(history['accuracy'], label='Training accuracy', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_accuracy'], label='Validation accuracy', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Accuracy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(17,4))\n","plt.plot(history['lr'], label='Learning Rate', alpha=.8, color='#ff7f0e')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()"],"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1224x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1224x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1224x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"4_eXoY7pTxb7"},"source":["model.save('LSTM')\n","# model = tfk.models.load_model('LSTM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VTQvyDzeVHoY"},"source":["# Predict the test set with the LSTM\n","predictions = model.predict(X_test)\n","predictions.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5G0a1Lh_VYNC"},"source":["# Compute the confusion matrix\n","cm = confusion_matrix(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","\n","# Compute the classification metrics\n","accuracy = accuracy_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","precision = precision_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","recall = recall_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","f1 = f1_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","print('Accuracy:',accuracy.round(4))\n","print('Precision:',precision.round(4))\n","print('Recall:',recall.round(4))\n","print('F1:',f1.round(4))\n","\n","# Plot the confusion matrix\n","plt.figure(figsize=(10,8))\n","sns.heatmap(cm.T, cmap='Blues', xticklabels=list(label_mapping.keys()), yticklabels=list(label_mapping.keys()))\n","plt.xlabel('True labels')\n","plt.ylabel('Predicted labels')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t5VrQa_OMu74"},"source":["#### Bidirectional Long Short Term Memory (BiLSTM) Neural Network\n","\n","![](https://drive.google.com/uc?export=view&id=1CN-jJqzb5AurhnMMiuvdVCaPGy2KReLc\n",")"]},{"cell_type":"code","metadata":{"id":"1I9QwEDaV6xF"},"source":["def build_BiLSTM_classifier(input_shape, classes):\n","    # Build the neural network layer by layer\n","    input_layer = tfkl.Input(shape=input_shape, name='Input')\n","\n","    # Feature extractor\n","    bilstm = tfkl.Bidirectional(tfkl.LSTM(128, return_sequences=True))(input_layer)\n","    bilstm = tfkl.Bidirectional(tfkl.LSTM(128))(bilstm)\n","    dropout = tfkl.Dropout(.5, seed=seed)(bilstm)\n","\n","    # Classifier\n","    classifier = tfkl.Dense(128, activation='relu')(dropout)\n","    output_layer = tfkl.Dense(classes, activation='softmax')(classifier)\n","\n","    # Connect input and output through the Model class\n","    model = tfk.Model(inputs=input_layer, outputs=output_layer, name='model')\n","\n","    # Compile the model\n","    model.compile(loss=tfk.losses.CategoricalCrossentropy(), optimizer=tfk.optimizers.Adam(), metrics='accuracy')\n","\n","    # Return the model\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2HsaYcmTV6uX"},"source":["model = build_BiLSTM_classifier(input_shape, classes)\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hoS_rLRJV6sZ"},"source":["# Train the model\n","history = model.fit(\n","    x = X_train,\n","    y = y_train,\n","    batch_size = batch_size,\n","    epochs = epochs,\n","    validation_split=.1,\n","    callbacks = [\n","        tfk.callbacks.EarlyStopping(monitor='val_accuracy', mode='max', patience=10, restore_best_weights=True),\n","        tfk.callbacks.ReduceLROnPlateau(monitor='val_accuracy', mode='max', patience=5, factor=0.5, min_lr=1e-5)\n","    ]\n",").history"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d408cNUKV6pi"},"source":["best_epoch = np.argmax(history['val_accuracy'])\n","plt.figure(figsize=(17,4))\n","plt.plot(history['loss'], label='Training loss', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_loss'], label='Validation loss', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Categorical Crossentropy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(17,4))\n","plt.plot(history['accuracy'], label='Training accuracy', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_accuracy'], label='Validation accuracy', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Accuracy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(18,3))\n","plt.plot(history['lr'], label='Learning Rate', alpha=.8, color='#ff7f0e')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6fXFsgwMV6mv"},"source":["model.save('BiLSTM')\n","# model = tfk.models.load_model('BiLSTM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1e89RnuPfLVs"},"source":["# Predict the test set with the BiLSTM\n","predictions = model.predict(X_test)\n","predictions.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tGdH9IVQfOd8"},"source":["# Compute the confusion matrix\n","cm = confusion_matrix(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","\n","# Compute the classification metrics\n","accuracy = accuracy_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","precision = precision_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","recall = recall_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","f1 = f1_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","print('Accuracy:',accuracy.round(4))\n","print('Precision:',precision.round(4))\n","print('Recall:',recall.round(4))\n","print('F1:',f1.round(4))\n","\n","# Plot the confusion matrix\n","plt.figure(figsize=(10,8))\n","sns.heatmap(cm.T, cmap='Blues', xticklabels=list(label_mapping.keys()), yticklabels=list(label_mapping.keys()))\n","plt.xlabel('True labels')\n","plt.ylabel('Predicted labels')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FqTU7SDgjWgV"},"source":["#### 1D Convolutional Neural Network\n","\n","![](https://drive.google.com/uc?export=view&id=10B7c-F58-eNr6CP7D_UZeVp0gTeYMrFQ\n",")"]},{"cell_type":"code","metadata":{"id":"7nxJrPoojt3z"},"source":["def build_1DCNN_classifier(input_shape, classes):\n","    # Build the neural network layer by layer\n","    input_layer = tfkl.Input(shape=input_shape, name='Input')\n","\n","    # Feature extractor\n","    cnn = tfkl.Conv1D(128,3,padding='same',activation='relu')(input_layer)\n","    cnn = tfkl.MaxPooling1D()(cnn)\n","    cnn = tfkl.Conv1D(128,3,padding='same',activation='relu')(cnn)\n","    gap = tfkl.GlobalAveragePooling1D()(cnn)\n","    dropout = tfkl.Dropout(.5, seed=seed)(gap)\n","\n","    # Classifier\n","    classifier = tfkl.Dense(128, activation='relu')(dropout)\n","    output_layer = tfkl.Dense(classes, activation='softmax')(classifier)\n","\n","    # Connect input and output through the Model class\n","    model = tfk.Model(inputs=input_layer, outputs=output_layer, name='model')\n","\n","    # Compile the model\n","    model.compile(loss=tfk.losses.CategoricalCrossentropy(), optimizer=tfk.optimizers.Adam(), metrics='accuracy')\n","\n","    # Return the model\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d1zEtb3Hjt1O"},"source":["model = build_1DCNN_classifier(input_shape, classes)\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LQOYU2X0jty5"},"source":["# Train the model\n","history = model.fit(\n","    x = X_train,\n","    y = y_train,\n","    batch_size = batch_size,\n","    epochs = epochs,\n","    validation_split=.1,\n","    callbacks = [\n","        tfk.callbacks.EarlyStopping(monitor='val_accuracy', mode='max', patience=10, restore_best_weights=True),\n","        tfk.callbacks.ReduceLROnPlateau(monitor='val_accuracy', mode='max', patience=5, factor=0.5, min_lr=1e-5)\n","    ]\n",").history"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rzrqDHgijtwW"},"source":["best_epoch = np.argmax(history['val_accuracy'])\n","plt.figure(figsize=(17,4))\n","plt.plot(history['loss'], label='Training loss', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_loss'], label='Validation loss', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Categorical Crossentropy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(17,4))\n","plt.plot(history['accuracy'], label='Training accuracy', alpha=.8, color='#ff7f0e')\n","plt.plot(history['val_accuracy'], label='Validation accuracy', alpha=.9, color='#5a9aa5')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.title('Accuracy')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()\n","\n","plt.figure(figsize=(18,3))\n","plt.plot(history['lr'], label='Learning Rate', alpha=.8, color='#ff7f0e')\n","plt.axvline(x=best_epoch, label='Best epoch', alpha=.3, ls='--', color='#5a9aa5')\n","plt.legend()\n","plt.grid(alpha=.3)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZmNPtx9VjtuC"},"source":["model.save('1DCNN')\n","# model = tfk.models.load_model('1DCNN')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fvKkbmnujtrS"},"source":["# Predict the test set with the 1DCNN\n","predictions = model.predict(X_test)\n","predictions.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KRdpbCqCjtpR"},"source":["# Compute the confusion matrix\n","cm = confusion_matrix(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","\n","# Compute the classification metrics\n","accuracy = accuracy_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1))\n","precision = precision_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","recall = recall_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","f1 = f1_score(np.argmax(y_test, axis=-1), np.argmax(predictions, axis=-1), average='macro')\n","print('Accuracy:',accuracy.round(4))\n","print('Precision:',precision.round(4))\n","print('Recall:',recall.round(4))\n","print('F1:',f1.round(4))\n","\n","# Plot the confusion matrix\n","plt.figure(figsize=(10,8))\n","sns.heatmap(cm.T, cmap='Blues', xticklabels=list(label_mapping.keys()), yticklabels=list(label_mapping.keys()))\n","plt.xlabel('True labels')\n","plt.ylabel('Predicted labels')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"et_9CJzIBsRt"},"source":["Damn, once again no free lunch"]}]}